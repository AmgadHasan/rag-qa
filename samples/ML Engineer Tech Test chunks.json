["Agent Framework for RAG-Based Question Generation\nand Summarization\nThe objective of this tech test is to evaluate the candidate's technical skills and\napproach to developing an agent-based framework for generating questions (MCQs and\nfill-in-the-blanks) and summarizing key topics from a given PDF file using Large\nLanguage Models (LLMs) and RAG using relevant libraries in Python.\nPlease Do:\n\u25cf Please Do:\n\u25cf \u25cf Please Do:\n\u25cf \u25cf \u25cf Please Do:\n\u25cf \u25cf \u25cf \u25cf Please Do:\n\u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf", "Include Instructions: Provide instructions on how to run the code. \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf \u25cf Keep it Simple: Ensure the solution is simple and concise.\n\u25cf\nSubmit Within Time: Return the zipped solution within 72 hours by email to\ntechnicaltest@alefeducation.com or provide a link to a Google Drive folder with\nthe zipped solution.\n\u25cf\nAsk Questions: If you have any questions, email\ntechnicaltest@alefeducation.com.\nPlease Don\u2019t:\n\u25cf Please Don\u2019t:\n\u25cf \u25cf Please Don\u2019t:\n\u25cf \u25cf \u25cf Please Don\u2019t:\n\u25cf \u25cf \u25cf \u25cf", "\u25cf \u25cf \u25cf \u25cf\nDo not use public source control systems (e.g., GitHub). \u25cf \u25cf \u25cf \u25cf\nDo not build a user interface; the focus is on the technical solution and not the interface. interface. \u25cf interface. \u25cf interface.\n\u25cf \u25cf interface.\n\u25cf\nDo not spend more than 2-3 hours on the test; the goal is to understand your\napproach and way of thinking.\n\u25cf\nPerform Unnecessary Tasks: Do not perform exploratory data analysis, model\nevaluation.\n\u25cf evaluation.\n\u25cf \u25cf evaluation.\n\u25cf \u25cf \u25cf evaluation.", "\u25cf \u25cf \u25cf \u25cf evaluation. \u25cf \u25cf Cheat: Do not cheat; cheaters will be immediately dismissed and blacklisted by Alef. Alef. Alef. Alef. Technical Requirements: 1. Design an agent-based framework that integrates with LLMs to generate questions and summaries from an uploaded file. 2. Use libraries like Langchain, LangGraph, Huggingface, FastAPI to facilitate the development. development. 3. Use openly available LLMs available via APIs from providers like Groq, Google AI, or Huggingface. or Huggingface. 4. Use an", "4. Use an open-source vector open-source vector database vector database to store and retrieve relevant information efficiently. efficiently. 5. Create a Dockerfile with commands to run the application and expose the endpoints. endpoints. Endpoints: Endpoints:", "1. /ingest: Upload and process the PDF file. 2. /generate/questions: Generate either MCQ and Fill-in-the-blank type questions based on the PDF. based on the PDF. 3. /generate/summary: Generate summaries based on a given topic from the\nuploaded PDF. uploaded PDF.\nFunctional Test Conditions:\n\u25cf \u25cf \u25cf \u25cf\nUpload a sample PDF file \"A quick Algebra Review\" and ingest into a Vector DB with appropriate metadata. \u25cf \u25cf \u25cf \u25cf Generate MCQs and fill-in-the-blank questions based on the topics in the PDF file\n\u25cf \u25cf", "\u25cf \u25cf\nGenerate summaries for any specified topics. Assessment Criteria:\n\u25cf \u25cf\nShould cover all Technical requirements.\n\u25cf \u25cf\nShould cover the functional test case.\n\u25cf \u25cf \u25cf \u25cf\nDemonstrate clean coding and test driven development.\n\u25cf \u25cf \u25cf \u25cf\nShould be organized to demonstrate as a python production code file rather than a .ipynb file used for experimentation."]